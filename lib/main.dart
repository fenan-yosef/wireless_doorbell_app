// lib/main.dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

// Ensure this path is correct if you generated with flutterfire configure
import 'firebase_options.dart'; // This file is generated by flutterfire configure

// Initialize FlutterLocalNotificationsPlugin
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
FlutterLocalNotificationsPlugin();

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase App
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Initialize local notifications
  const AndroidInitializationSettings initializationSettingsAndroid =
  AndroidInitializationSettings('@mipmap/ic_launcher'); // Your app icon
  final InitializationSettings initializationSettings = InitializationSettings(
    android: initializationSettingsAndroid,
  );
  await flutterLocalNotificationsPlugin.initialize(initializationSettings);

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Smart Doorbell',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const HomeScreen(), // Start with the HomeScreen
    );
  }
}

// --- HomeScreen Widget ---
class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  @override
  void initState() {
    super.initState();
    _listenForNewDoorbellEvents(); // Always listen for new events
  }

  // Listens for new doorbell events and triggers a local notification
  void _listenForNewDoorbellEvents() {
    _firestore
        .collection('doorbell_events')
        .orderBy('triggeredAt', descending: true)
        .limit(1) // Only listen for the most recent event for notification
        .snapshots()
        .listen((snapshot) {
      if (snapshot.docChanges.isNotEmpty) {
        for (var change in snapshot.docChanges) {
          if (change.type == DocumentChangeType.added) {
            final eventData = change.doc.data();
            if (eventData != null) {
              final deviceId = eventData['deviceId'] ?? 'Unknown Device';
              final location = eventData['location'] ?? 'Unknown Location';

              // Trigger notification
              _showLocalNotification(
                'ðŸ”” Doorbell Ring!',
                'A ring occurred at $location (Device: $deviceId)',
              );
            }
          }
        }
      }
    });
  }

  Future<void> _showLocalNotification(String title, String body) async {
    const AndroidNotificationDetails androidPlatformChannelSpecifics =
    AndroidNotificationDetails(
      'doorbell_channel', // Must match the channel ID from MainActivity.kt
      'Doorbell Alerts',
      channelDescription: 'Notifications for smart doorbell rings',
      importance: Importance.max, // High importance for visibility
      priority: Priority.high,
      showWhen: false,
    );
    const NotificationDetails platformChannelSpecifics =
    NotificationDetails(android: androidPlatformChannelSpecifics);

    await flutterLocalNotificationsPlugin.show(
      0, // Notification ID - use a unique ID if you want multiple notifications
      title,
      body,
      platformChannelSpecifics,
      payload: 'doorbell_event', // Optional payload
    );
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
        title: const Text('Smart Doorbell Home'),
    centerTitle: true,
    actions: [
    // Bell icon to navigate to the history list
    IconButton(
    icon: const Icon(Icons.notifications_active),
    onPressed: () {
    Navigator.push(
    context,
    MaterialPageRoute(builder: (context) => const DoorbellHistoryScreen()),
    );
    },
    ),
    ],
    ),
    body: Center(
    child: Padding(
    padding: const EdgeInsets.all(16.0),
    child: Column(
    mainAxisAlignment: MainAxisAlignment.center,
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
    // Display the last recorded event
    StreamBuilder<QuerySnapshot>(
    stream: _firestore
        .collection('doorbell_events')
        .orderBy('triggeredAt', descending: true)
        .limit(1) // Only show the most recent event on the home screen
        .snapshots(),
    builder: (context, snapshot) {
    if (snapshot.hasError) {
    return Text('Error: ${snapshot.error}');
    }
    if (snapshot.connectionState == ConnectionState.waiting) {
    return const CircularProgressIndicator();
    }
    if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
    return const Text('Welcome! No doorbell events yet.');
    }

    final lastEvent = snapshot.data!.docs.first.data() as Map<String, dynamic>;
    final location = lastEvent['location'] ?? 'Unknown Location';
    final deviceId = lastEvent['deviceId'] ?? 'Unknown Device';
    final timestamp = (lastEvent['triggeredAt'] as Timestamp?)?.toDate();
    final formattedTime = timestamp != null
    ? '${timestamp.toLocal().hour}:${timestamp.toLocal().minute} on ${timestamp.toLocal().day}/${timestamp.toLocal().month}/${timestamp.toLocal().year}'
        : 'N/A';


    return Card(
      elevation: 4,
      margin: const EdgeInsets.only(bottom: 20),
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(Icons.doorbell, size: 60, color: Colors.blue),
            const SizedBox(height: 15),
            const Text(
              'Last Doorbell Ring:',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            Text('Location: $location', style: const TextStyle(fontSize: 16)),
            Text('Device: $deviceId', style: const TextStyle(fontSize: 16)),
            Text('Time: $formattedTime', style: const TextStyle(fontSize: 16)),
          ],
        ),
      ),
    );
    },
    ),
      const SizedBox(height: 30),
      // Additional Home Page Content to fill the space
      const Text(
        'Your smart doorbell system is actively monitoring for rings.',
        textAlign: TextAlign.center,
        style: TextStyle(fontSize: 16, color: Colors.grey),
      ),
      const SizedBox(height: 10),
      const Text(
        'New events will trigger a notification on your device.',
        textAlign: TextAlign.center,
        style: TextStyle(fontSize: 14, color: Colors.grey),
      ),
    ],
    ),
    ),
    ),
    );
  }
}

// --- DoorbellHistoryScreen Widget ---
class DoorbellHistoryScreen extends StatelessWidget {
  const DoorbellHistoryScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final FirebaseFirestore _firestore = FirebaseFirestore.instance;

    return Scaffold(
        appBar: AppBar(
          title: const Text('Doorbell History'),
          centerTitle: true,
        ),
        body: StreamBuilder<QuerySnapshot>(
        stream: _firestore
        .collection('doorbell_events')
        .orderBy('triggeredAt', descending: true)
        .snapshots(),
    builder: (context, snapshot) {
    if (snapshot.hasError) {
    return Center(child: Text('Error: ${snapshot.error}'));
    }

    if (snapshot.connectionState == ConnectionState.waiting) {
    return const Center(child: CircularProgressIndicator());
    }

    if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
    return const Center(child: Text('No doorbell events yet.'));
    }

    return ListView.builder(
    itemCount: snapshot.data!.docs.length,
    itemBuilder: (context, index) {
    final doc = snapshot.data!.docs[index];
    final data = doc.data() as Map<String, dynamic>;

    final deviceId = data['deviceId'] ?? 'N/A';
    final location = data['location'] ?? 'N/A';
    final timestamp = data['triggeredAt'] as Timestamp?;
    final dateTime = timestamp?.toDate();
    final formattedTime = dateTime != null
    ? '${dateTime.toLocal().hour}:${dateTime.toLocal().minute}:${dateTime.toLocal().second} - ${dateTime.toLocal().day}/${dateTime.toLocal().month}/${dateTime.toLocal().year}'
        : 'N/A';


    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
      elevation: 3,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Location: $location',
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 5),
            Text(
              'Device ID: $deviceId',
              style:
              const TextStyle(fontSize: 14, color: Colors.grey),
            ),
            const SizedBox(height: 5),
            Text(
              'Time: $formattedTime',
              style: const TextStyle(fontSize: 14),
            ),
          ],
        ),
      ),
    );
    },
    );
    },
        ),
    );
  }
}
