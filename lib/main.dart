// lib/main.dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

// Ensure this path is correct if you generated with flutterfire configure
// It links your Firebase project to your Flutter app
import 'firebase_options.dart'; // This file is generated by flutterfire configure

// Initialize FlutterLocalNotificationsPlugin
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase App
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Initialize local notifications
  const AndroidInitializationSettings initializationSettingsAndroid =
      AndroidInitializationSettings('@mipmap/ic_launcher'); // Your app icon
  final InitializationSettings initializationSettings = InitializationSettings(
    android: initializationSettingsAndroid,
  );
  await flutterLocalNotificationsPlugin.initialize(initializationSettings);

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Smart Doorbell',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const DoorbellHistoryScreen(),
    );
  }
}

class DoorbellHistoryScreen extends StatefulWidget {
  const DoorbellHistoryScreen({super.key});

  @override
  State<DoorbellHistoryScreen> createState() => _DoorbellHistoryScreenState();
}

class _DoorbellHistoryScreenState extends State<DoorbellHistoryScreen> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  @override
  void initState() {
    super.initState();
    _listenForNewDoorbellEvents();
  }

  // Listens for new doorbell events and triggers a local notification
  void _listenForNewDoorbellEvents() {
    _firestore
        .collection('doorbell_events')
        .orderBy('triggeredAt', descending: true)
        .limit(
            1) // Only listen for the most recent event to trigger notification
        .snapshots()
        .listen((snapshot) {
      if (snapshot.docChanges.isNotEmpty) {
        for (var change in snapshot.docChanges) {
          if (change.type == DocumentChangeType.added) {
            final eventData = change.doc.data();
            if (eventData != null) {
              final deviceId = eventData['deviceId'] ?? 'Unknown Device';
              final location = eventData['location'] ?? 'Unknown Location';
              final triggeredAt =
                  (eventData['triggeredAt'] as Timestamp?)?.toDate();

              String notificationBody =
                  'A ring occurred at $location (Device: $deviceId)';
              if (triggeredAt != null) {
                // Example formatting, adjust as needed
                String formattedTime =
                    '${triggeredAt.toLocal().hour}:${triggeredAt.toLocal().minute}';
                notificationBody += ' at $formattedTime';
              }

              _showLocalNotification(
                'ðŸ”” Doorbell Ring!',
                'A ring occurred at $location (Device: $deviceId)',
              );

              // You can also add a subtle vibration or sound here if desired
              // Example: HapticFeedback.lightImpact();
            }
          }
        }
      }
    });
  }

  Future<void> _showLocalNotification(String title, String body) async {
    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
      'doorbell_channel', // Must match the channel ID from MainActivity.kt or define a new one
      'Doorbell Alerts',
      channelDescription: 'Notifications for smart doorbell rings',
      importance: Importance.max,
      priority: Priority.high,
      showWhen: false,
    );
    const NotificationDetails platformChannelSpecifics =
        NotificationDetails(android: androidPlatformChannelSpecifics);

    await flutterLocalNotificationsPlugin.show(
      0, // Notification ID - use a unique ID if you want multiple notifications
      title,
      body,
      platformChannelSpecifics,
      payload:
          'item x', // Optional payload to pass data when notification is tapped
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Doorbell History'),
        centerTitle: true,
      ),
      body: StreamBuilder<QuerySnapshot>(
        // Stream to fetch all doorbell events, ordered by newest first
        stream: _firestore
            .collection('doorbell_events')
            .orderBy('triggeredAt', descending: true)
            .snapshots(),
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }

          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
            return const Center(child: Text('No doorbell events yet.'));
          }

          // Display the list of doorbell events
          return ListView.builder(
            itemCount: snapshot.data!.docs.length,
            itemBuilder: (context, index) {
              final doc = snapshot.data!.docs[index];
              final data = doc.data() as Map<String, dynamic>;

              final deviceId = data['deviceId'] ?? 'N/A';
              final location = data['location'] ?? 'N/A';
              final timestamp = data['triggeredAt'] as Timestamp?;
              final dateTime = timestamp?.toDate();
              final formattedTime = dateTime != null
                  ? '${dateTime.toLocal().hour}:${dateTime.toLocal().minute}:${dateTime.toLocal().second} - ${dateTime.toLocal().day}/${dateTime.toLocal().month}/${dateTime.toLocal().year}'
                  : 'N/A';

              return Card(
                margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                elevation: 3,
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Location: $location',
                        style: const TextStyle(
                            fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(height: 5),
                      Text(
                        'Device ID: $deviceId',
                        style:
                            const TextStyle(fontSize: 14, color: Colors.grey),
                      ),
                      const SizedBox(height: 5),
                      Text(
                        'Time: $formattedTime',
                        style: const TextStyle(fontSize: 14),
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}
