// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'dart:async';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_core_platform_interface/firebase_core_platform_interface.dart';
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'package:plugin_platform_interface/plugin_platform_interface.dart';
import 'package:wireless_doorbell_app/main.dart';

// Mocks generated by Mockito
class MockFirebaseFirestore extends Mock implements FirebaseFirestore {}
class MockCollectionReference extends Mock implements CollectionReference<Map<String, dynamic>> {}
class MockQuerySnapshot extends Mock implements QuerySnapshot<Map<String, dynamic>> {}
class MockDocumentChange extends Mock implements DocumentChange<Map<String, dynamic>> {}
class MockDocumentSnapshot extends Mock implements DocumentSnapshot<Map<String, dynamic>> {}

// Helper class for Firebase Core mocking
typedef Callback = void Function(MethodCall call);

// Setup mock Firebase core
void setupMockFirebaseCore({Callback? callMe}) {
  TestWidgetsFlutterBinding.ensureInitialized();

  // Mock Firebase.initializeApp()
  MethodChannelFirebase.channel.setMockMethodCallHandler((call) async {
    if (call.method == 'Firebase#initializeCore') {
      return [
        {
          'name': defaultFirebaseAppName,
          'options': {
            'apiKey': '123',
            'appId': '123',
            'messagingSenderId': '123',
            'projectId': '123',
          },
          'pluginConstants': {},
        }
      ];
    }
    if (call.method == 'Firebase#initializeApp') {
      return {
        'name': call.arguments['appName'],
        'options': call.arguments['options'],
        'pluginConstants': {},
      };
    }
    if (callMe != null) {
      callMe(call);
    }
    return null;
  });
}


void main() {
  // Mock Firebase App for testing
  setupMockFirebaseCore();

  late MockFirebaseFirestore mockFirestore;
  late MockCollectionReference mockCollectionReference;
  late StreamController<QuerySnapshot<Map<String, dynamic>>> snapshotStreamController;

  setUp(() async {
    // Initialize Firebase for testing if not already done by setupMockFirebaseCore
    // This is a bit redundant with setupMockFirebaseCore but ensures Firebase.app() works
    await Firebase.initializeApp(
      name: defaultFirebaseAppName,
      options: const FirebaseOptions(
        apiKey: 'test-api-key',
        appId: 'test-app-id',
        messagingSenderId: 'test-sender-id',
        projectId: 'test-project-id',
      ),
    );

    mockFirestore = MockFirebaseFirestore();
    mockCollectionReference = MockCollectionReference();
    snapshotStreamController = StreamController<QuerySnapshot<Map<String, dynamic>>>.broadcast();

    when(mockFirestore.collection('doorbellEvents')).thenReturn(mockCollectionReference);
    when(mockCollectionReference.snapshots()).thenAnswer((_) => snapshotStreamController.stream);
  });

  tearDown(() {
    snapshotStreamController.close();
  });

  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });

  testWidgets('Firestore listener displays snackbar for new event', (WidgetTester tester) async {
    // Replace the real FirebaseFirestore with our mock
    final originalFirestore = FirebaseFirestore.instance;
    FirebaseFirestore.instance = mockFirestore; // Replace instance

    await tester.pumpWidget(const MyApp());
    await tester.pumpAndSettle(); // Allow time for initState and listeners to set up

    // Create mock data for the new document
    final mockDocumentSnapshot = MockDocumentSnapshot();
    when(mockDocumentSnapshot.data()).thenReturn({'timestamp': Timestamp.now(), 'type': 'ring'});

    final mockDocumentChange = MockDocumentChange();
    when(mockDocumentChange.type).thenReturn(DocumentChangeType.added);
    when(mockDocumentChange.doc).thenReturn(mockDocumentSnapshot);

    final mockQuerySnapshot = MockQuerySnapshot();
    when(mockQuerySnapshot.docChanges).thenReturn([mockDocumentChange]);

    // Add the mock snapshot to the stream to simulate a Firestore event
    snapshotStreamController.add(mockQuerySnapshot);
    await tester.pumpAndSettle(); // Let the stream event propagate and UI update

    // Verify that a SnackBar is displayed
    expect(find.byType(SnackBar), findsOneWidget);
    expect(find.textContaining('New doorbell event! Timestamp:'), findsOneWidget);

    // Restore the original FirebaseFirestore instance
    FirebaseFirestore.instance = originalFirestore;
  });
}
